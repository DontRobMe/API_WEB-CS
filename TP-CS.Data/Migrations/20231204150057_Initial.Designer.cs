// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TP_CS.Data.Context;

#nullable disable

namespace TPCS.Data.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231204150057_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("TP_CS.Business.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ResponsibleUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TP_CS.Business.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Iscomplete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserTaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserTaskId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TP_CS.Business.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("LeaderUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("projectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("projectId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TP_CS.Business.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TP_CS.Business.Models.UserTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TP_CS.Business.Models.Tag", b =>
                {
                    b.HasOne("TP_CS.Business.Models.UserTask", null)
                        .WithMany("Tags")
                        .HasForeignKey("UserTaskId");
                });

            modelBuilder.Entity("TP_CS.Business.Models.Team", b =>
                {
                    b.HasOne("TP_CS.Business.Models.Project", null)
                        .WithMany("Teams")
                        .HasForeignKey("projectId");
                });

            modelBuilder.Entity("TP_CS.Business.Models.User", b =>
                {
                    b.HasOne("TP_CS.Business.Models.Team", null)
                        .WithMany("Users")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("TP_CS.Business.Models.UserTask", b =>
                {
                    b.HasOne("TP_CS.Business.Models.Project", null)
                        .WithMany("UserTasks")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TP_CS.Business.Models.User", null)
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TP_CS.Business.Models.Project", b =>
                {
                    b.Navigation("Teams");

                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("TP_CS.Business.Models.Team", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TP_CS.Business.Models.User", b =>
                {
                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("TP_CS.Business.Models.UserTask", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
